package org.ovirt.engine.sdk;

import java.io.IOException;

import org.apache.http.client.ClientProtocolException;
import org.apache.log4j.ConsoleAppender;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PatternLayout;
import org.ovirt.engine.sdk.web.ConnectionsPool;
import org.ovirt.engine.sdk.web.ConnectionsPoolBuilder;
import org.ovirt.engine.sdk.web.HttpProxy;
import org.ovirt.engine.sdk.web.HttpProxyBroker;
import org.ovirt.engine.sdk.web.HttpProxyBuilder;
import org.ovirt.engine.sdk.decorators.*;
import org.ovirt.engine.sdk.entities.API;
import org.ovirt.engine.sdk.exceptions.ServerException;
import org.ovirt.engine.sdk.exceptions.UnsecuredConnectionAttemptError;
import org.ovirt.engine.sdk.utils.SerializationHelper;

/**
 * oVirt virtualization Java SDK.
 */
public class Api implements AutoCloseable {

    private volatile HttpProxyBroker proxy = null;
    private volatile API entryPoint = null;
    private final Object LOCK = new Object();

$fields$

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site using
     *             HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password) throws ClientProtocolException,
            ServerException, IOException, UnsecuredConnectionAttemptError {
        this(
            url,
            username,
            password,
            null, // sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            null, // noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            null, // filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param keyStorePath
     *            path to CA certificate KeyStore
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, String keyStorePath)
            throws ClientProtocolException, ServerException, IOException,
                   UnsecuredConnectionAttemptError {
        this(
            url,
            username,
            password,
            null, // sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            null, // noHostVerification,
            keyStorePath,
            null, // keyStorePassword,
            null, // filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param keyStorePath
     *            path to CA certificate KeyStore
     * @param keyStorePassword
     *            password for the CA certificate KeyStore
     * @param filter
     *            enables filtering based on user's permissions
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, String keyStorePath,
            String keyStorePassword, Boolean filter) throws ClientProtocolException,
            ServerException, UnsecuredConnectionAttemptError, IOException {
        this(
            url,
            username,
            password,
            null, // sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            null, // noHostVerification,
            keyStorePath,
            keyStorePassword,
            filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param sessionid
     *            oVirt api sessionid to authenticate the user with
     *            (used as SSO solution instead of username+password)
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String sessionid) throws ClientProtocolException, ServerException,
            IOException, UnsecuredConnectionAttemptError {
        this(
            url,
            null, // username,
            null, // password,
            sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            null, // noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            null, // filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param noHostVerification
     *            turns hostname verification off
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, boolean noHostVerification)
            throws ClientProtocolException, ServerException, UnsecuredConnectionAttemptError,
            IOException {
        this(
            url,
            username,
            password,
            null, // sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            null, // filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param sessionid
     *            oVirt api sessionid to authenticate the user with
     *            (used as SSO solution instead of username+password)
     * @param noHostVerification
     *            turns hostname verification off
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String sessionid, boolean noHostVerification)
            throws ClientProtocolException, ServerException, UnsecuredConnectionAttemptError,
            IOException {
        this(
            url,
            null, // username,
            null, // password,
            sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            null, // noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            null, // filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param noHostVerification
     *            turns hostname verification off
     * @param filter
     *            enables filtering based on user's permissions
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, Boolean noHostVerification,
            Boolean filter) throws ClientProtocolException, ServerException,
            UnsecuredConnectionAttemptError, IOException {
        this(
            url,
            username,
            password,
            null, // sessionid,
            null, // port,
            null, // requestTimeout,
            null, // sessionTimeout,
            null, // persistentAuth,
            null, // noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            filter,
            null, // debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param sessionid
     *            oVirt api sessionid to authenticate the user with
     *            (used as SSO solution instead of username+password)
     * @param port
     *            oVirt api port
     * @param requestTimeout
     *            request timeout (preserved for future use)
     * @param persistentAuth
     *            disable persistent authentication (will be used auth. per request)
     * @param noHostVerification
     *            turns hostname verification off
     * @param filter
     *            enables filtering based on user's permissions
     * @param debug
     *            enables debug mode
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, String sessionid, Integer port,
            Integer requestTimeout, Boolean persistentAuth, Boolean noHostVerification,
            Boolean filter, Boolean debug) throws ClientProtocolException, ServerException,
            UnsecuredConnectionAttemptError, IOException {
        this(
            url,
            username,
            password,
            sessionid,
            port,
            requestTimeout,
            null, // sessionTimeout,
            persistentAuth,
            noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            filter,
            debug,
            null  // kerberos,
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param sessionid
     *            oVirt api sessionid to authenticate the user with
     *            (used as SSO solution instead of username+password)
     * @param port
     *            oVirt api port
     * @param requestTimeout
     *            request timeout (preserved for future use)
     * @param sessionTimeout
     *            authentication session inactivity timeout in minutes (if persistentAuth is enabled)
     * @param persistentAuth
     *            disable persistent authentication (will be used auth. per request)
     * @param noHostVerification
     *            turns hostname verification off
     * @param filter
     *            enables filtering based on user's permissions
     * @param debug
     *            enables debug mode
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured site
     *             using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, String sessionid, Integer port,
            Integer requestTimeout, Integer sessionTimeout, Boolean persistentAuth,
            Boolean noHostVerification, Boolean filter, Boolean debug) throws ClientProtocolException,
            ServerException, UnsecuredConnectionAttemptError, IOException {
        this(
            url,
            username,
            password,
            sessionid,
            port,
            requestTimeout,
            sessionTimeout,
            persistentAuth,
            noHostVerification,
            null, // keyStorePath,
            null, // keyStorePassword,
            filter,
            debug,
            null  // kerberos
        );
    }

    /**
     * @param url
     *            oVirt api url
     * @param username
     *            oVirt api username
     * @param password
     *            oVirt api password
     * @param sessionid
     *            oVirt api sessionid to authenticate the user with
     *            (used as SSO solution instead of username+password)
     * @param port
     *            oVirt api port
     * @param requestTimeout
     *            request timeout (preserved for future use)
     * @param sessionTimeout
     *            authentication session inactivity timeout in minutes (if persistentAuth is enabled)
     * @param persistentAuth
     *            disable persistent authentication
     *            (will be used auth. per request)
     * @param keyStorePath
     *            path to CA certificate KeyStore
     * @param keyStorePassword
     *            password for the CA certificate KeyStore
     * @param filter
     *            enables filtering based on user's permissions
     * @param debug
     *            enables debug mode
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     * @throws UnsecuredConnectionAttemptError
     *             Signals that attempt of connecting to SSL secured
     *             site using HTTP protocol has occurred.
     *
     * @deprecated Use the {@link ApiBuilder} class instead.
     */
    @Deprecated
    public Api(String url, String username, String password, String sessionid,
            Integer port, Integer requestTimeout, Integer sessionTimeout,
            Boolean persistentAuth, String keyStorePath, String keyStorePassword,
            Boolean filter, Boolean debug) throws ClientProtocolException,
            ServerException, UnsecuredConnectionAttemptError, IOException {
        this(
            url,
            username,
            password,
            sessionid,
            port,
            requestTimeout,
            sessionTimeout,
            persistentAuth,
            null, // noHostVerification,
            keyStorePath,
            keyStorePassword,
            filter,
            debug,
            null  // kerberos
        );
    }

    /**
     * This method is intended for use by the {@link org.ovirt.engine.sdk.ApiBuilder} class, don't use it directly.
     */
    Api(
        String url,
        String username,
        String password,
        String sessionid,
        Integer port,
        Integer requestTimeout,
        Integer sessionTimeout,
        Boolean persistentAuth,
        Boolean noHostVerification,
        String keyStorePath,
        String keyStorePassword,
        Boolean filter,
        Boolean debug,
        Boolean kerberos
    )
    throws ServerException, UnsecuredConnectionAttemptError, IOException {

        configureLog4J(debug);
        ConnectionsPool pool = new ConnectionsPoolBuilder()
                .url(url)
                .username(username)
                .password(password)
                .port(port)
                .requestTimeout(requestTimeout)
                .sessionTimeout(sessionTimeout)
                .noHostVerification(noHostVerification)
                .keyStorePath(keyStorePath)
                .keyStorePassword(keyStorePassword)
                .kerberos(kerberos)
                .build();
        HttpProxy httpProxy = new HttpProxyBuilder(pool)
                .sessionid(sessionid)
                .persistentAuth(persistentAuth)
                .filter(filter)
                .debug(debug)
                .build();
        this.proxy = new HttpProxyBroker(httpProxy);
        initResources();
    }

    /**
     * Configures log4j.
     */
    private void configureLog4J(Boolean debug) {
        String patternLayout = "%d %-5p [%c] %m%n";
        if (debug != null && Boolean.TRUE.equals(debug)) {

            Logger rootLogger = Logger.getRootLogger();
            if (!rootLogger.getAllAppenders().hasMoreElements()) {
                rootLogger.setLevel(Level.INFO);
                rootLogger.addAppender(new ConsoleAppender(
                        new PatternLayout(patternLayout)));

            }
            Logger pkgLogger =
                    rootLogger.getLoggerRepository()
                            .getLogger("org.apache.http");
            pkgLogger.setLevel(Level.DEBUG);
            pkgLogger.addAppender(new ConsoleAppender(
                    new PatternLayout(patternLayout)));

        } else {
            Logger rootLogger = Logger.getRootLogger();
            if (!rootLogger.getAllAppenders().hasMoreElements()) {
                rootLogger.setLevel(Level.OFF);
                rootLogger.addAppender(new ConsoleAppender(
                        new PatternLayout(patternLayout)));
            }
        }
    }

    /**
     * Fetches /api entry point
     *
     * @return API object instance
     */
    private API getEntryPoint() throws ClientProtocolException, ServerException, IOException,
            UnsecuredConnectionAttemptError {
        String entryPointXML = this.proxy.get(this.proxy.getRoot());
        if (entryPointXML != null && !entryPointXML.equals("")) {
            return SerializationHelper.unmarshall(API.class, entryPointXML);
        }
        throw new UnsecuredConnectionAttemptError();
    }

    /**
     * initializes resources
     */
    private synchronized void initResources() throws ClientProtocolException, ServerException, UnsecuredConnectionAttemptError,
            IOException {
        this.entryPoint = getEntryPoint();
    }

    /**
     * Enable/Disable client permissions based filtering (default is False)
     *
     * @param filter
     */
    public synchronized void setFilter(boolean filter) {
        this.proxy.setFilter(filter);
    }

    /**
     * Enable/Disable persistent authentication (default is True)
     *
     * @param persistentAuth
     */
    public synchronized void setPersistentAuth(boolean persistentAuth) {
        this.proxy.setPersistentAuth(persistentAuth);
    }

    /**
     * @return persistent authentication flag
     */
    public boolean isPersistentAuth() {
        return this.proxy.isPersistentAuth();
    }

    /**
     * @return Filter flag
     */
    public boolean isFilter() {
        return this.proxy.isFilter();
    }

    /**
     * @return Debug flag
     */
    public boolean isDebug() {
        return this.proxy.isDebug();
    }

    /**
     * @param sessionid
     *            oVirt api sessionid to authenticate the user with
     *            (used as SSO solution instead of username+password)
     */
    public synchronized void setSessionid(String sessionid) {
        this.proxy.setSessionid(sessionid);
    }

    /**
    * oVirt api sessionid to authenticate the user with
    * (used as SSO solution instead of username+password)
     */
    public boolean isSetSessionid() {
        return this.proxy.isSetSessionid();
    }

    /**
     * When SDK instance is no longer needed, shut down the connection
     * manager/httpproxy to ensure immediate deallocation of all system
     * resources.
     */
    public synchronized void shutdown() {
        proxy.shutdown();
    }

    /**
     * Closes this resource, relinquishing any underlying resources.
     * This method is invoked automatically on objects managed by the
     * try-with-resources statement.
     */
    @Override
    public void close() throws Exception {
        shutdown();
    }

$getters$

$methods$
}
