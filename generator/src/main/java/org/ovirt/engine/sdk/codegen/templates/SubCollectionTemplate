package org.ovirt.engine.sdk.decorators;

import java.io.IOException;
import java.util.List;
import java.util.UUID;

import org.apache.http.Header;
import org.apache.http.client.ClientProtocolException;
import org.ovirt.engine.sdk.common.CollectionDecorator;
import org.ovirt.engine.sdk.exceptions.ServerException;
import org.ovirt.engine.sdk.utils.CollectionUtils;
import org.ovirt.engine.sdk.utils.HttpHeaderBuilder;
import org.ovirt.engine.sdk.utils.HttpHeaderUtils;
import org.ovirt.engine.sdk.utils.UrlBuilder;
import org.ovirt.engine.sdk.utils.UrlBuilder;
import org.ovirt.engine.sdk.utils.UrlHelper;
import org.ovirt.engine.sdk.web.HttpProxyBroker;
import org.ovirt.engine.sdk.web.UrlParameterType;
import org.ovirt.engine.sdk.entities.Action;

/**
 * <p>$collection_broker_type$ providing relation and functional services
 * <p>to {@link org.ovirt.engine.sdk.entities.$collection_type$ }.
 */
@SuppressWarnings("unused")
public class $collection_broker_type$ extends
        CollectionDecorator<org.ovirt.engine.sdk.entities.$entity_type$,
                            org.ovirt.engine.sdk.entities.$collection_type$,
                            $entity_broker_type$> {

    private $parent_broker_type$ parent;

    /**
     * @param proxy HttpProxyBroker
     * @param parent $parent_broker_type$
     */
    public $collection_broker_type$(HttpProxyBroker proxy, $parent_broker_type$ parent) {
        super(proxy, "$collection_name$");
        this.parent = parent;
    }

    /**
     * Lists $entity_broker_type$ objects.
     *
     * @return
     *     List of {@link $entity_broker_type$ }
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     */
    @Override
    public List<$entity_broker_type$> list() throws ClientProtocolException,
            ServerException, IOException {
        String url = this.parent.getHref() + SLASH + getName();
        return list(url, org.ovirt.engine.sdk.entities.$collection_type$.class, $entity_broker_type$.class);
    }

    /**
     * Fetches $entity_broker_type$ object by id.
     *
     * @return
     *     {@link $entity_broker_type$ }
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     */
    @Override
    public $entity_broker_type$ get(UUID id) throws ClientProtocolException,
            ServerException, IOException {
        String url = this.parent.getHref() + SLASH + getName() + SLASH + id.toString();
        return getProxy().get(url, org.ovirt.engine.sdk.entities.$entity_type$.class, $entity_broker_type$.class);
    }

    /**
     * Fetches $entity_broker_type$ object by id.
     *
     * @return
     *     {@link $entity_broker_type$ }
     *
     * @throws ClientProtocolException
     *             Signals that HTTP/S protocol error has occurred.
     * @throws ServerException
     *             Signals that an oVirt api error has occurred.
     * @throws IOException
     *             Signals that an I/O exception of some sort has occurred.
     */
    @Override
    public $entity_broker_type$ getById(String id) throws ClientProtocolException,
            ServerException, IOException {
        String url = this.parent.getHref() + SLASH + getName() + SLASH + id;
        return getProxy().get(url, org.ovirt.engine.sdk.entities.$entity_type$.class, $entity_broker_type$.class);
    }

$methods$
}
