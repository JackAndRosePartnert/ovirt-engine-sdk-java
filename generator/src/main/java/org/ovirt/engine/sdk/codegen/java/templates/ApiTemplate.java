//
// Copyright (c) 2012 Red Hat, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//           http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package org.ovirt.engine.sdk.codegen.java.templates;

import org.ovirt.engine.sdk.codegen.BrokerRules;
import org.ovirt.engine.sdk.codegen.Location;
import org.ovirt.engine.sdk.codegen.LocationRules;
import org.ovirt.engine.sdk.codegen.templates.AbstractTemplate;
import org.ovirt.engine.sdk.codegen.utils.Tree;
import org.ovirt.engine.sdk.entities.API;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.ovirt.engine.sdk.codegen.java.utils.StringUtils.concatenateValues;

public class ApiTemplate extends AbstractTemplate {
    public String evaluate(Tree<Location> root) {
        // We need to store the declarations of methods and fields indexed by name in order to be able to sort them by
        // name before generating the code, so that the resulting code will have a predictable order:
        Map<String, String> fieldsMap = new HashMap<>();
        Map<String, String> gettersMap = new HashMap<>();
        Map<String, String> methodsMap = new HashMap<>();

        // Find the sub-collections:
        List<Tree<Location>> collectionTrees = root.getChildren(LocationRules::isCollection);

        // Generate the code for the collection fields:
        for (Tree<Location> collectionTree : collectionTrees) {
            String fieldType = BrokerRules.getBrokerType(collectionTree);
            String fieldName = Character.toLowerCase(fieldType.charAt(0)) + fieldType.substring(1);
            String fieldCode = new VariableTemplate().evaluate(fieldType, fieldName);
            fieldsMap.put(fieldName, fieldCode);
        }

        // Generate the code for the collection getters:
        for (Tree<Location> collectionTree : collectionTrees) {
            String getterName = LocationRules.getName(collectionTree);
            String getterCode = new CollectionGetterTemplate().evaluate(collectionTree);
            gettersMap.put(getterName, getterCode);
        }

        // Generate the code for the methods:
        for (Method method : API.class.getMethods()) {
            String methodName = method.getName();
            if (methodName.startsWith("get")) {
                String propertyName = methodName.replaceAll("^get", "");
                if (IGNORED_PROPERTIES.contains(propertyName)) {
                    continue;
                }
                String methodCode;
                if (STATIC_PROPERTIES.contains(propertyName)) {
                    methodCode = new RootResourceStaticTemplate().evaluate(method);
                }
                else {
                    methodCode = new RootResourceDynamicTemplate().evaluate(method);
                }
                methodsMap.put(propertyName, methodCode);
            }
        }

        // Populate the template:
        set("fields", concatenateValues(fieldsMap));
        set("getters", concatenateValues(gettersMap));
        set("methods", concatenateValues(methodsMap));

        return evaluate();
    }

    /**
     * This set contains the names of the properties that are part of the {@code API} class generated by the {@code xjc}
     * compiler but that aren't implemented in the API entry point.
     */
    private static final Set<String> IGNORED_PROPERTIES = new HashSet<>();

    static {
        IGNORED_PROPERTIES.add("Actions");
        IGNORED_PROPERTIES.add("Href");
        IGNORED_PROPERTIES.add("Links");
        IGNORED_PROPERTIES.add("ExtensionType");
        IGNORED_PROPERTIES.add("CreationStatus");
        IGNORED_PROPERTIES.add("Id");
        IGNORED_PROPERTIES.add("Name");
        IGNORED_PROPERTIES.add("Description");
        IGNORED_PROPERTIES.add("Class");
    }

    /**
     * This set contains the names of the static properties that are part of the {@code API} class generated by the
     * {@code xjc} compiler.
     */
    private static final Set<String> STATIC_PROPERTIES = new HashSet<>();

    static {
        STATIC_PROPERTIES.add("ProductInfo");
        STATIC_PROPERTIES.add("SpecialObjects");
    }
}
